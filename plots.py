# -*- coding: utf-8 -*-
"""
Created on Wed Dec 11 13:01:13 2019

@author: ryanb
"""

import matplotlib.pyplot as plt
import numpy as np

#Programme for all the plots (data taken from Blue Crystal output file)
params = {'mathtext.default': 'regular' }          

#Suvat_simulation_v2 (single core, initial attempts)
body_frequency = [10, 13, 25, 73, 265]
timings = np.array([[17.936691522598267, 27.936164140701294, 89.4109194278717, 682.5150389671326, 8712.795106649399],
                    [15.660699605941772, 24.16328191757202, 80.40935373306274, 614.8744080066681, 7336.0612869262695],
                    [16.571448802947998, 25.496273040771484, 81.6048264503479, 612.2009420394897, 7740.082448482513],
                    [18.04361081123352, 28.228327751159668, 90.56669354438782, 690.2610647678375, 8762.794068574905],
                    [18.049259424209595, 28.097684383392334, 90.29408359527588, 688.5235946178436, 8745.72099161148]])

mean_timings = np.zeros((1,len(timings[0])))
for i in np.arange(0,len(timings[0])):    
    mean_timings[0,i] = np.mean(timings[:,i])
    print(mean_timings)


    
x_suvat_axis = np.log10(np.array(body_frequency))
y_suvat_axis = np.log10(np.array(mean_timings))

plt.rcParams.update(params)
plt.scatter(x_suvat_axis,y_suvat_axis)
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken/s)')
plt.show()


#grav_vector_array (Vectorisation of whole programme, single core)
body_vec_freq=[10, 13, 25, 73, 265]
vec_timings=np.array([[3.5114221572875977, 4.5823073387146, 10.350419759750366, 66.10520458221436, 870.6857752799988],
                     [3.498777151107788, 4.555008411407471, 10.316791534423828, 65.75536346435547, 869.3104050159454],
                     [3.4929070472717285, 4.55733060836792, 10.333836078643799, 65.81233048439026, 868.9983382225037],
                     [3.512537956237793, 4.581831932067871, 10.340567350387573, 65.88397550582886, 868.4600191116333],
                     [3.5068552494049072, 4.565778493881226, 10.341972589492798, 65.8410108089447, 867.9122216701508],
                     [3.499008893966675, 4.5637524127960205, 10.326703786849976, 65.80606865882874, 869.8874394893646]])

mean_vec_timings = np.zeros((1,len(vec_timings[0])))            
for i in np.arange(0,len(vec_timings[0])):    
    mean_vec_timings[0,i] = np.mean(vec_timings[:,i])    
    print(mean_vec_timings)        



x_vec_axis = np.log10(np.array(body_vec_freq))
y_vec_axis = np.log10(np.array(mean_vec_timings))

plt.rcParams.update(params)
plt.scatter(x_vec_axis,y_vec_axis)
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken/s)')
plt.show()


#Cythonising suvat simulation

body_cython_freq= [10, 13, 25, 73, 265] 
cython_timings=    np.array([[13.761406183242798, 21.106854677200317, 69.34520268440247, 578.3660862445831, 7367.494443178177],
                            [15.73561978340149, 24.855244636535645, 81.48872113227844, 641.5348873138428, 8351.92782330513],
                            [15.74135971069336, 24.86172604560852, 82.2011046409607, 650.1521878242493, 8499.628195524216],
                            [15.664608001708984, 24.678119897842407, 81.78606939315796, 640.9546372890472, 8430.673974275589],
                            [15.630531311035156, 24.76021647453308, 81.65546417236328, 642.4050693511963, 8344.224479913712]])

mean_cython_timings = np.zeros((1,len(cython_timings[0])))            
for i in np.arange(0,len(vec_timings[0])):    
    mean_cython_timings[0,i] = np.mean(cython_timings[:,i])    
    
x_cython_axis = np.log10(np.array(body_cython_freq))

y_cython_axis = np.log10(np.array(mean_cython_timings))

cdef_cython = [1.5237371921539307, 2.2423694133758545, 5.5747058391571045, 47.08106994628906, 6976.563249826431]


plt.rcParams.update(params)
plt.scatter(x_cython_axis,y_cython_axis,color= 'pink',label='Cythonized')
plt.scatter(x_cython_axis,np.log10(cdef_cython),color='orange',label='Cythonized with declared variables')
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken/s)')
plt.legend()
plt.show()


#comparing all single core programmes

plt.scatter(x_suvat_axis,y_suvat_axis,color= 'red',label='Initial programme')
plt.scatter(x_vec_axis,y_vec_axis, color= 'blue', label='Vectorised programme')
plt.scatter(x_cython_axis,y_cython_axis, color = 'pink', label = 'Cython programme')
plt.scatter(x_cython_axis,np.log10(cdef_cython),color='orange',label='Cythonized with declared variables')
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken/s)')
plt.legend()
plt.show()




#MPI using partial vectorisation and 16 cores
body_MPI_freq = [10, 13, 25, 73, 265]
MPI_timings=[5.76856803894043, 6.529869079589844, 12.593906879425049, 58.60313391685486, 612.9852240085602]

x_MPI_axis = np.log10(np.array(body_MPI_freq))
y_MPI_axis = np.log10(np.array(MPI_timings))

plt.rcParams.update(params)
plt.scatter(x_MPI_axis,y_MPI_axis)
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken For 16 Cores Using MPI/s)')
plt.show()

#OpenMP using partial vectorisation and 16 cores

body_openmp_freq = [10, 13, 25, 73, 265]
openmp_timings=[1.95312306471169, 3.028653522953391, 9.25292699597776, 60.49230602290481, 673.9883585786447]

x_openmp_axis = np.log10(np.array(body_openmp_freq))
y_openmp_axis = np.log10(np.array(openmp_timings))

plt.rcParams.update(params)
plt.scatter(x_openmp_axis,y_openmp_axis)
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken For 16 Cores Using OpenMP/s)')
plt.show()


#comparing openMP and MPI
plt.scatter(x_suvat_axis,y_suvat_axis,color= 'red',label='Initial programme')
plt.scatter(x_MPI_axis,y_MPI_axis, color= 'green', label='16 core MPI')
plt.scatter(x_openmp_axis,y_openmp_axis, color = 'yellow', label = '16 core OpenMP')
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken/s)')
plt.legend()
plt.show()


plt.scatter(x_suvat_axis,y_suvat_axis,color= 'red',label='Initial programme')
plt.scatter(x_MPI_axis,y_MPI_axis, color= 'green', label='16 core MPI')
plt.scatter(x_openmp_axis,y_openmp_axis, color = 'yellow', label = '16 core OpenMP')
plt.scatter(x_vec_axis,y_vec_axis, color= 'blue', label='Vectorised programme')
plt.scatter(x_cython_axis,y_cython_axis, color = 'pink', label = 'Cython programme')
plt.scatter(x_cython_axis,np.log10(cdef_cython),color='orange',label='Cythonized with declared variables')
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken/s)')
plt.legend()
plt.show()


#how OpenMP timings vary with number of cores used
full_o_timings = np.array([[1.95312306471169, 3.028653522953391, 9.25292699597776, 60.49230602290481, 673.9883585786447],
                  [1.9603373371064663, 3.325407679192722, 12.443692196160555, 95.18580952752382, 1200.243744019419],
                  [3.98980794288218, 5.953373719006777, 15.879349207505584, 112.83231030963361, 1359.879011405632],
                  [4.777120622806251, 7.492244034074247, 19.323367780074477, 124.24827103875577, 1509.7142445929348],
                  [5.691121377050877, 7.2508878223598, 19.021383771672845, 135.33712737914175, 1519.7767370268703],
                  [6.250110946595669, 9.506430489011109, 22.552528778091073, 142.4144847355783, 1607.9631917513907],
                  [7.0592709286138415, 10.450823026709259, 25.58725795056671, 145.4524253755808, 1570.4967153035104],
                  [8.092069478705525, 12.632951588369906, 30.94761462789029, 160.8828878365457, 1745.3592285271734],
                  [10.62441760674119, 13.289849314838648, 33.369231131859124, 181.42115360219032, 1875.7112867264077],
                  [11.973778432235122, 14.067787139676511, 35.796062149107456, 194.79345098603517, 1993.9865482635796],
                  [12.607712588272989, 16.071594804525375, 40.404325631447136, 213.25948857981712, 2193.9387619821355],
                  [19.59789752215147, 33.965824261307716, 44.3440770925954, 232.30402591917664, 2365.336552240886],
                  [15.627831510268152, 24.90870890021324, 50.18760491814464, 250.41297722049057, 2518.079720804468],
                  [18.879071848466992, 24.036890998482704, 55.46444016043097, 276.9332298701629, 2768.1853948421776],
                  [42.357620012015104, 56.41875210031867, 136.89804222714156, 615.8465526625514, 5046.7885326854885]])
    

x_no_cores = np.arange(16,1,-1)
x_no_cores_f=np.arange(2,17)
y_open_cores_timings_10= full_o_timings[:,0] #for 10 bodies
y_open_cores_timings_265= full_o_timings[:,-1] #for 265 bodies




#how MPI timings vary with number of cores used
full_m_timings =np.array([[8.541303873062134, 14.869575023651123, 50.18869185447693, 408.9693441390991, 5384.128577947617],
                 [7.6543591022491455, 10.703759908676147, 31.689586877822876, 262.57360219955444, 3514.8120210170746],
                 [6.099272966384888, 8.880748987197876, 24.83753991127014, 200.93563199043274, 2692.2577199935913],
                 [7.351330041885376, 9.425861120223999, 27.999613046646118, 177.93963098526, 2179.644917011261],
                 [6.24638295173645, 9.514352083206177, 24.046352863311768, 154.87857794761658, 1845.0176680088043],
                 [6.143099069595337, 7.603801012039185, 20.477370023727417, 132.55357003211975, 1551.784038066864],
                 [6.405412912368774, 7.75223183631897, 20.543713092803955, 123.34244012832642, 1431.304034948349],
                 [6.710594177246094, 8.125559091567993, 17.369096994400024, 113.17050194740295, 1246.5227830410004],
                 [6.832365036010742, 8.225651025772095, 17.556825160980225, 102.69898986816406, 1163.650104045868],
                 [5.666765928268433, 8.449786901473999, 17.550523042678833, 79.62082600593567, 1051.2349481582642],
                 [5.958297967910767, 8.647562026977539, 17.887003898620605, 91.574786901474, 920.9647109508514],
                 [6.20367693901062, 8.896023035049438, 14.343796014785767, 79.87781405448914, 792.8265631198883],
                 [6.171544790267944, 7.091538190841675, 14.511888027191162, 74.46404385566711, 784.6370301246643],
                 [6.44837498664856, 6.707648992538452, 13.35921311378479, 60.92427611351013, 712.6360130310059],
                 [7.4673449993133545, 9.30453610420227, 20.353775024414062, 71.24694514274597, 642.184653043747]])

y_MPI_cores_timings_10 = full_m_timings[:,0]
y_MPI_cores_timings_256 = full_m_timings[:,-1]

x=np.linspace(0,16,15)
y= [17.2523] * 15


plt.scatter(x_no_cores,y_open_cores_timings_10,color= 'yellow',label='OpenMP with 10 bodies')
plt.scatter(x_no_cores_f,y_MPI_cores_timings_10,color='green',label='MPI with 10 bodies')
plt.plot(x,y,'--',color='red',label='Single core programme with 10 bodies')
plt.xlabel('Number of Cores')
plt.ylabel('Time Taken/s')
plt.legend()
plt.show()     


plt.scatter(x_no_cores,y_open_cores_timings_265,color= 'yellow',label='OpenMP with 265 bodies')
plt.scatter(x_no_cores_f,y_MPI_cores_timings_256,color= 'green',label='MPI with 265 bodies')
plt.xlabel('Number of Cores')
plt.ylabel('Time Taken/s')
plt.legend()
plt.show()

#finding a minimum point in the timings as number of cores is increased
cores = np.arange(2,49)

times_265=np.array([[602.8896040916443],[582.1558129787445],[529.9269979000092],[501.01951122283936],
       [512.8729419708252],[466.49091506004333],[542.7606370449066],[433.21317410469055],
       [431.0013201236725],[403.9824960231781],[405.92995595932007],[405.53934693336487],
       [372.35706090927124],[376.5338008403778],[378.0557978153229],[383.58443689346313],    
       [338.76888513565063],[347.25974702835083],[363.6925139427185],[371.4225060939789],
       [310.9857199192047],[304.9601671695709],[311.9911799430847],[321.9699490070343],
       [302.77249789237976],[304.23412895202637],[300.49482703208923],[302.4491488933563],
       [279.419184923172],[272.1352460384369],[271.5873029232025],[272.446830034256]])

times_73 =np.array([[64.60520100593567],[70.15792393684387],[80.48828315734863],[66.59494614601135],[62.975462913513184],      
           [65.55533695220947], [58.57219099998474],[62.794392108917236],[50.427212953567505],
           [59.87904119491577],[52.09406900405884], [48.460347175598145],[46.26901078224182],
           [64.56980991363525],[54.261327028274536], [70.79910588264465],[54.988970041275024],
           [63.00299310684204],[79.93618297576904],[47.872575998306274], [44.57139992713928],
           [47.32413101196289],[48.44891119003296],[57.757055044174194],[43.73937797546387],
           [41.23194098472595],[46.020891189575195],[51.455237865448],[50.42850399017334],
           [64.28207302093506],[45.82799792289734],[58.900449991226196]])
           
MPI265 =list(full_m_timings[:,-1])
np.array(MPI265.extend(times_265))
MPI72=list(full_m_timings[:,-2])
MPI72.extend(times_73)
print(MPI265)

plt.plot(cores,MPI265,label='MPI with 265 bodies')
plt.plot(cores,MPI72,label='MPI with 72 bodies')
plt.xlabel('Number of Cores')
plt.ylabel('Time Taken/s')
plt.legend()
plt.show()   

#comparing static, guided and dynamic


static=np.array([2.5827527791261673, 2.9188764207065105, 9.519632663577795, 71.73525950685143, 941.6920663900673])

dynamic=np.array([[2.269283376634121, 3.5736671313643456, 10.536215532571077, 67.42095363140106, 722.4579353556037],
         [3.201494798064232, 5.3242324367165565, 12.486929949373007, 102.34952738881111, 1276.8825541511178],
         [3.80762192979455, 5.874396521598101, 16.314336210489273, 118.42481008172035, 1460.8781860917807],
         [4.526497878134251, 6.304596472531557, 20.99824057519436, 128.38396721333265, 1555.3208170831203],
         [5.538453001528978, 7.501454826444387, 20.72577852383256, 142.6062297411263, 1638.7240683436394],
         [6.343877732753754, 9.012190941721201, 24.21508314087987, 155.606065709,14388, 1730.7931178063154],
         [7.410245161503553, 10.27894827350974, 24.17453033477068, 161.20907418057323, 1848.3199550323188],
         [8.261839583516121, 12.89801625162363, 31.385082114487886, 175.52061184495687, 2002.0503861531615],
         [12.977546874433756, 13.649146854877472, 35.06451530754566, 199.26538083329797, 2213.1486507877707],
         [13.268395747989416, 17.40288094803691, 37.14697190001607, 229.0585560053587, 2409.9951270893216],
         [16.423002257943153, 17.057538092136383, 43.32339729741216, 241.80686946958303, 2559.546632874757],
         [18.050274934619665, 28.17266944050789, 58.353475123643875, 293.28338807076216, 2751.432214524597],
         [20.714228346943855, 29.462766855955124, 61.61215008422732, 307.72090715169907, 2929.22467956692],
         [24.76747301220894, 34.63293670117855, 69.90863046422601, 370.5978796184063, 3298.4361922591925],
         [59.701313603669405, 70.6707039475441, 201.69338344410062, 938.6575248278677, 5956.388375282288]])

guided=np.array([[2.091205608099699, 3.137893993407488, 10.161661878228188, 64.95191632211208, 817.2396099232137],
         [3.183987036347389, 5.059131123125553, 14.09214536473155, 110.28269463032484, 1305.839400243014],
         [3.0838488265872, 5.803509671241045, 16.75633491203189, 124.09024052321911, 1471.5898044258356],
         [5.050141882151365, 6.008920103311539, 20.23244198784232, 128.53296257182956, 1577.5938621461391],
         [5.583725735545158, 8.998369757086039, 22.56337697803974, 139.29745761305094, 1624.637507416308],
         [7.86146754026413, 9.405193079262972, 25.98913834244013, 153.66416827961802, 1703.8609652668238],
         [8.44476817175746, 11.76232435926795, 29.48202881217003, 176.87202686071396, 1888.416638955474],
         [10.088276412338018, 14.492783889174461, 33.63080347701907, 195.0819730721414, 2058.826373759657],
         [11.291388221085072, 17.557620715349913, 40.8000773191452, 226.1088619083166, 2350.654331933707],
         [13.615718185901642, 20.174244429916143, 46.84073460102081, 253.7625245563686, 2580.5232035815716],
         [15.013463992625475, 24.396880641579628, 54.0072249956429, 279.0680187419057, 2730.0410232171416],
         [19.050231393426657, 28.2785965166986, 57.274519849568605, 300.1619068682194, 2833.830478798598],
         [21.739039082080126, 29.064007095992565, 66.46695236489177, 324.9803322851658, 3055.5201407447457],
         [24.97446169704199, 31.595127418637276, 75.93057767301798, 367.7699105925858, 3407.8686085119843],
         [56.34860435500741, 79.14609574526548, 197.64812676981091, 976.7955539673567, 6278.2857999019325]])
      


dynamic_times=dynamic[0]
guided_times=guided[0,:]
static_times=static
print(dynamic_times)
print(guided_times)
print(static_times)

plt.scatter(np.log10(body_openmp_freq),np.log10(dynamic_times),color= 'black',label='Dynamic scheduling with 265 bodies')
plt.scatter(np.log10(body_openmp_freq),np.log10(guided_times),color= 'magenta',label='Guided scheduling with 265 bodies')
plt.scatter(np.log10(body_openmp_freq),np.log10(static_times),color= 'cyan',label='Static scheduling with 265 bodies')
plt.xlabel('$log_{10}$(Number of Bodies)')
plt.ylabel('$log_{10}$(Time Taken/s)')
plt.legend()
plt.show()

     